"""Script containing the base simulation kernel class."""


class KernelSimulation(object):
    """Base simulation kernel.

    The simulation kernel is responsible for generating the simulation and
    passing to all other kernel the API that they can use to interact with the
    simulation.
    模拟内核负责生成模拟，并向所有其他内核传递他们可以用来与模拟交互的API。

    The simulation kernel is also responsible for advancing, resetting, and
    storing whatever simulation data is relevant.
    仿真内核还负责推进、重置和存储任何相关的仿真数据。

    All methods in this class are abstract and must be overwritten by other
    child classes.
    此类中的所有方法都是抽象的，必须由其他子类覆盖。
    """

    def __init__(self, master_kernel):
        """Initialize the simulation kernel.

        Parameters
        ----------
        master_kernel : flow.core.kernel.Kernel
            the higher level kernel (used to call methods from other
            sub-kernels)
        """
        self.master_kernel = master_kernel
        self.kernel_api = None

    def pass_api(self, kernel_api):
        """Acquire the kernel api that was generated by the simulation kernel.

        Parameters
        ----------
        kernel_api : any
            an API that may be used to interact with the simulator
        """
        self.kernel_api = kernel_api

    def start_simulation(self, network, sim_params):
        """Start a simulation instance.

        network : any
            an object or variable that is meant to symbolize the network that
            is used during the simulation. For example, in the case of sumo
            simulations, this is (string) the path to the .sumo.cfg file.
            表示模拟过程中使用的网络的对象或变量。例如，在sumo模拟的情况下，这是（字符串）.sumo.cfg文件的路径。
        sim_params : flow.core.params.SimParams
            simulation-specific parameters
        """
        raise NotImplementedError

    def simulation_step(self):
        """Advance the simulation by one step.

        This is done in most cases by calling a relevant simulator API method.
        """
        raise NotImplementedError

    def update(self, reset):
        """Update the internal attributes of the simulation kernel.
        更新模拟内核的内部属性。

        Any update operations are meant to support ease of simulation in
        current and future steps.
        任何更新操作都旨在支持当前和未来步骤中的模拟。

        Parameters
        ----------
        reset : bool
            specifies whether the simulator was reset in the last simulation
            step
        """
        raise NotImplementedError

    def check_collision(self):
        """Determine if a collision occurred in the last time step.

        Returns
        -------
        bool
            True if collision occurred, False otherwise
        """
        raise NotImplementedError

    def close(self):
        """Close the current simulation instance."""
        raise NotImplementedError
